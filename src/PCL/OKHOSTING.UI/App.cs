using System;
using System.Collections.Generic;

namespace OKHOSTING.UI
{
	/// <summary>
	/// Base class for platform independet apps, child classes should implement native platforms like WinForms, WebForms, XamarinForms, etc
	/// <para xml:lang="es">
	/// Clase base para la plataforma de aplicaciones independientes, las clases hijas deben implementar plataformas nativas como WinForms, WebForms, Formularios Xamarin, etc.
	/// </para>
	/// </summary>
	public abstract class App
	{
		//protected & internal

		/// <summary>
		/// The stack where we will keep and organization of which controller is currently executing (at top) and which are in the background
		/// <para xml:lang="es">
		/// La pila donde vamos a guardar y organizar lo que el controlador esta ejecutando actualmente (en la parte superior) y que estan en el fondo.
		/// </para>
		/// </summary>
		protected readonly Stack<Controller> ControllerStack = new Stack<Controller>();

		/// <summary>
		/// Stores that state of a page between postbacks or between controller starts and finish
		/// <para xml:lang="es">
		/// Almacena ese estado de una pagina entre las devoluciones de datos entre el inicio y el fin del control.
		/// </para>
		/// </summary>
		protected readonly Stack<PageState> PageStateStack = new Stack<PageState>();

		/// <summary>
		/// Start the contoller specified
		/// <para xml:lang="es">Inicializa el control especificado.</para>
		/// </summary>
		/// <param name="controller">The controller to start
		/// <para xml:lang="es">
		/// El control que se va a inicializar
		/// </para>
		/// </param>
		protected internal virtual void StartController(Controller controller)
		{
			if (controller == null)
			{
				throw new ArgumentNullException(nameof(controller));
			}

			//save page state, if any
			if (PageState != null)
			{
				PageState.Title = Page.Title;
				PageState.Content = Page.Content;
			}

			//push controller and an empty state to stack
			PageStateStack.Push(new PageState());
			ControllerStack.Push(controller);

			//reset page
			Page.Title = string.Empty;
			Page.Content = null;
			Controller.App = this;
		}

		/// <summary>
		/// Remoes the current controller from the stack and recreates the previous controler state, if any
		/// <para xml:lang="es">
		/// Elimina el controlador actual de la pila y recrea el estado del controlador anterior, en su caso
		/// </para>
		/// </summary>
		protected internal virtual void FinishController()
		{
			//remove controller and state from stacks
			ControllerStack.Pop();
			PageStateStack.Pop();

			//dispose page content generated by the last controller
			if (Page.Content != null)
			{
				//Platform.Page.Content.Dispose();
			}

			//is there still a controller and a page state? recreate that state
			if (PageState != null)
			{
				Page.Title = PageState.Title;
				Page.Content = PageState.Content;
			}
		}

		//public

		IPage _Page;

		/// <summary>
		/// Gets the Page that is currently being displayed to the user
		/// <para xml:lang="es">Obtiene la pagina que actualmente se esta mostrando al usuario</para>
		/// </summary>
		public virtual IPage Page
		{
			get
			{
				return _Page;
			}
			set
			{
				_Page = value;

				if(_Page != null)
				{
					_Page.App = this;
				}
			}
		}

		/// <summary>
		/// Gets the Controller that is currently controlling the Page, the "currently executing" controller wich is at the top of the stack
		/// <para xml:lang="es">
		/// Obtiene el controlador que esta actualmente controlando la pagina, el control "que se esta actualmente ejecuanto" es el que esta en la parte superior de la pila
		/// </para>
		/// </summary>
		public virtual Controller Controller
		{
			get
			{
				if (ControllerStack.Count == 0)
				{
					return null;
				}

				return ControllerStack.Peek();
			}
		}

		/// <summary>
		/// Gets the state of the page.
		/// <para xml:lang="es">Obtiene el estado de la pagina.</para>
		/// </summary>
		/// <value>The state of the page.
		/// <para xml:lang="es">El estado de la pagina.</para>
		/// </value>
		public virtual PageState PageState
		{
			get
			{
				if (PageStateStack.Count == 0)
				{
					return null;
				}

				return PageStateStack.Peek();
			}
		}

		/// <summary>
		/// Exits and closes the current app. Use this to dispose objects and release memory
		/// <para xml:lang="es">
		/// Se sale y cierra la aplicacion actual. Use esto para desechar objetos y liberar la memoria.
		/// </para>
		/// </summary>
		public virtual void Finish()
		{
			while (Controller != null)
			{
				Controller.Finish();
			}
		}

		/// <summary>
		/// Create this instance.
		/// <para xml:lang="es">Crea esta instancia.</para>
		/// </summary>
		/// <typeparam name="T">The 1st type parameter.
		/// <para xml:lang="es">El primer tipo de parametro.</para>
		/// </typeparam>
		public T Create<T>() where T : class, Controls.IControl
		{
			return Core.BaitAndSwitch.Create<T>(KnownPlatforms, null);
		}

		//static

		/// <summary>
		/// It is an arrangement of the libraries of the platforms where you can deploy the application.
		/// <para xml:lang="es">Es un arreglo de las libreris de las plataformas donde se puede implementar la aplicacion.</para>
		/// </summary>
		protected static readonly string[] KnownPlatforms = new string[] { "Net4.WinForms", "Net4.WebForms", "Net4.WPF", "UWP", "Xamarin.Forms", "Xamarin.Android", "Xamarin.iOS", "Xamarin.Windows", "Xamarin.Mac", "Net4.Ajax", "Net4.Console", "Gtk#" };
	}
}